/*
 * Copyright (c) 2024, RTE (http://www.rte-france.com)
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */
package org.gridsuite.useradmin.server.repository;

import org.assertj.core.api.WithAssertions;
import org.assertj.core.api.WithAssumptions;
import org.junit.jupiter.api.*;
import org.springframework.beans.FatalBeanException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.jdbc.AutoConfigureTestDatabase;
import org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTest;
import org.springframework.boot.test.autoconfigure.orm.jpa.TestEntityManager;
import org.springframework.context.ApplicationContext;
import org.springframework.core.ResolvableType;
import org.springframework.data.jpa.repository.JpaRepository;

import java.util.UUID;

//@SuppressWarnings("SpringJavaInjectionPointsAutowiringInspection")
@DisplayNameGeneration(DisplayNameGenerator.IndicativeSentences.class)
@TestInstance(TestInstance.Lifecycle.PER_CLASS)
@DataJpaTest
@AutoConfigureTestDatabase(replace = AutoConfigureTestDatabase.Replace.NONE) //H2 db config is done elsewhere
abstract class AbstractJpaCrudTest<R extends JpaRepository<E, UUID>, E> implements WithAssertions, WithAssumptions {
    @Autowired
    TestEntityManager testEntityManager;

    @Autowired
    ApplicationContext applicationContext;

    protected R repository;

    @BeforeEach
    @SuppressWarnings("unchecked")
    void setUp() {
        this.repository = (R) this.applicationContext
            .getBeanProvider(ResolvableType.forClass(AbstractJpaCrudTest.class, this.getClass()).getGeneric(0))
            .getIfUnique(() -> {
                throw new FatalBeanException("Multiple beans found for repository");
            });
    }

    /**
     * Create a new entity without {@link UUID ID} specified (to be generated by database)
     * @return the new entity
     */
    protected abstract E generateEntity();

    /**
     * Create a new entity
     * @param id the {@link UUID ID} for the new entity to use
     * @return the new entity
     */
    protected abstract E generateEntityWithId(UUID id);

    private E generateEntityWithRandomId() {
        return generateEntityWithId(UUID.randomUUID());
    }

    @Test
    void testFindAll() {
        assertThat(this.repository.findAll()).as("Entities in empty database").isEmpty();
        for (int i = 0; i < 3; i++) {
            testEntityManager.persist(generateEntity());
        }
        assertThat(this.repository.findAll()).as("Find all entities").hasSize(3);
    }

    @Test
    void testFindById() {
        assertThat(this.repository.findById(UUID.randomUUID())).as("Found entity in empty database").isNotPresent();
        final UUID id = UUID.randomUUID();
        testEntityManager.persist(generateEntityWithId(id));
        assertThat(this.repository.findById(id)).as("Found entity in repository").isPresent();
    }

    @Test
    void testCount() {
        assertThat(this.repository.count()).as("Count of entities in empty database").isZero();
        for (int i = 0; i < 5; i++) {
            testEntityManager.persist(generateEntity());
        }
        assertThat(this.repository.count()).as("Count of entities in repository").isEqualTo(5);
    }

    @Test
    void testExistsById() {
        assertThat(this.repository.existsById(UUID.randomUUID())).as("Exists entity in empty database").isFalse();
        final UUID id = UUID.randomUUID();
        testEntityManager.persist(generateEntityWithId(id));
        assertThat(this.repository.existsById(id)).as("Exists entity in repository").isTrue();
    }

    @Test
    void testSave() {
        assertThat(testEntityManager.find(generateEntity().getClass(), UUID.randomUUID())).as("Found entity in empty database").isNull();
        final UUID id = UUID.randomUUID();
        final E entity = generateEntityWithId(id);
        this.repository.save(entity);
        assertThat(testEntityManager.find(entity.getClass(), id)).as("Found entity in repository").isEqualTo(entity);
    }

    @Test
    void testDelete() {
        final UUID id = UUID.randomUUID();
        final E entity = testEntityManager.persist(generateEntityWithId(id));
        this.repository.delete(entity);
        assertThat(testEntityManager.find(entity.getClass(), id)).as("Entity deleted in database").isNull();
        //this.repository.deleteAll();
    }

    @Disabled("Normally its the same test than for delete(entity)")
    @Test
    void testDeleteById() {
        final UUID id = UUID.randomUUID();
        final E entity = testEntityManager.persist(generateEntityWithId(id));
        this.repository.deleteById(id);
        assertThat(testEntityManager.find(entity.getClass(), id)).as("Entity deleted in database").isNull();
    }
}
